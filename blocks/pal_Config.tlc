%% File : pal_Config.tlc
%% Created: Fri Nov 22 09:54:51 2013
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "pal_Config.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  pal_Config "C"

%% Function: BlockInstanceSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockInstanceSetup(block, system) Output
    %assign modelH      = LibGetModelDotHFile()
    %assign modelC      = LibGetModelDotCFile()
    %openfile buffer
        /* LibCacheDefine - BlockInstanceSetup */
    %closefile buffer
    %<LibCacheDefine(buffer)>

    %openfile buffer2
        /* LibCacheIncludes - BlockInstanceSetup */
    %closefile buffer2
    %<LibCacheIncludes(buffer2)>

    %openfile buffer3
        /* LibCacheExtern - BlockInstanceSetup */
        extern void BlockTypeSetup;
    %closefile buffer3
    %<LibCacheExtern(buffer3)>

    %openfile buffer4
        /* LibCacheFunctionPrototype - BlockInstanceSetup */
    %closefile buffer4
    %<LibCacheFunctionPrototype(buffer)>

   %% Code Sections Emitted by CFP Templates
    %openfile buffer
        /* Banner - BlockInstanceSetup */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Banner",buffer)>

    %openfile buffer
        /* Includes - BlockInstanceSetup */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Includes",buffer)>

    %openfile buffer
        /* Defines - BlockInstanceSetup */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Defines",buffer)>

    %openfile buffer
        /* IntrinsicTypes - BlockInstanceSetup */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"IntrinsicTypes",buffer)>

    %openfile buffer
        /* PrimitiveTypedefs - BlockInstanceSetup */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"PrimitiveTypedefs",buffer)>

    %openfile buffer
        /* UserTop - BlockInstanceSetup */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"UserTop",buffer)>

    %openfile buffer
        /* Typedefs - BlockInstanceSetup */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Typedefs",buffer)>

    %openfile buffer
        /* Enums - BlockInstanceSetup */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Enums",buffer)>

    %openfile buffer
        /* Declarations - BlockInstanceSetup */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Declarations",buffer)>

    %openfile buffer
        /* Functions - BlockInstanceSetup */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Functions",buffer)>

    %openfile buffer
        /* CompilerErrors - BlockInstanceSetup */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"CompilerErrors",buffer)>

    %openfile buffer
        /* CompilerWarnings - BlockInstanceSetup */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"CompilerWarnings",buffer)>

    %openfile buffer
        /* Documentation - BlockInstanceSetup */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Documentation",buffer)>

    %openfile buffer
        /* UserBottom - BlockInstanceSetup .c */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"UserBottom",buffer)>
    %<LibSetSourceFileSection(modelH,"UserBottom",buffer)>
%endfunction

%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
    %<LibAddToCommonIncludes("ch.h")>
    %<LibAddToCommonIncludes("hal.h")>
    %openfile buffer
        /* LibCacheDefine - BlockTypeSetup */
    %closefile buffer
    %<LibCacheDefine(buffer)>

    %openfile buffer2
        /* LibCacheIncludes - BlockTypeSetup */
    %closefile buffer2
    %<LibCacheIncludes(buffer2)>

    %openfile buffer3
        /* LibCacheExtern - BlockTypeSetup */
        extern void BlockTypeSetup;
    %closefile buffer3
    %<LibCacheExtern(buffer3)>

    %openfile buffer4
        /* LibCacheFunctionPrototype - BlockTypeSetup */
    %closefile buffer4
    %<LibCacheFunctionPrototype(buffer)>
%endfunction

%% Function: Enable =============================================================
%%
%function Enable(block, system) Output
    /* Enable Block: %<Name> */
%endfunction

%% Function: Disable =============================================================
%%
%function Disable(block, system) Output
    /* Disable Block: %<Name> */
%endfunction

%% InitializeConditions: Start =============================================================
%%
%function InitializeConditions(block, system) Output
    /* InitializeConditions Block: %<Name> */    
    %foreach sysIdx = 16
        %assign pin="pin"+STRING(sysIdx)
        %switch block.ParamSettings.%<pin>
            %case "Input"
            %case "Output"
                %assign pinMode="pinMode"+STRING(sysIdx)
                %assign pinMode=block.ParamSettings.%<pinMode>
                palSetPadMode(%<block.ParamSettings.portName>,%<sysIdx>,%<pinMode>);
                %break
            %case "Toggle"
            %case "Disabled"
                %break
            %default
                /* Pin %<sysIdx> TLC Error */
                %break
        %endswitch
    %endforeach
%endfunction

%% Function: Start =============================================================
%%
%function Start(block, system) Output
    /* Start Block: %<Name> */
    %openfile buffer
    /* Header Custom Code: %<Name> */
    %closefile buffer
	%<LibMdlStartCustomCode(buffer,"header")>
    %openfile buffer2
    /* Declaration Custom Code: %<Name> */
    %closefile buffer2
	%<LibMdlStartCustomCode(buffer2,"declaration")>
    %openfile buffer3
    /* Execution Custom Code: %<Name> */
    %closefile buffer3
	%<LibMdlStartCustomCode(buffer,"execution")>
    %openfile buffer4
    /* Trailer Custom Code: %<Name> */
    %closefile buffer4
	%<LibMdlStartCustomCode(buffer,"trailer")>
%endfunction

%% Function: Outputs ==========================================================
%%openfile
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
    /* Output Block: %<Name> */
    %foreach sysIdx = 16
        %assign pin="pin"+STRING(sysIdx)
        %switch block.ParamSettings.%<pin>
            %case "Disabled"
                /* Pin %<sysIdx> Disabled */
                %break
            %case "Output"
                palWritePad(%<block.ParamSettings.portName>,%<sysIdx>,%<LibBlockInputSignal(sysIdx, "", "", 0)>);
                %break
            %case "Input"
                %<LibBlockOutputSignal(sysIdx, "", "", 0)>=palReadPad(%<block.ParamSettings.portName>,%<sysIdx>);
                %break
            %case "Toggle"
                palTogglePad(%<block.ParamSettings.portName>,%<sysIdx>);
                %break
            %default
                /* Pin %<sysIdx> TLC Error */
                %break
        %endswitch
    %endforeach
%endfunction

%% Function: Update =============================================================
%%
%function Update(block, system) Output
    /* Update Block: %<Name> */
%endfunction


%% Function: Terminate =============================================================
%%
%function Derivatives(block, system) Output
    /* Derivatives Block: %<Name> */
%endfunction

%% Function: Terminate =============================================================
%%
%function Terminate(block, system) Output
    /* Terminate Block: %<Name> */
%endfunction

%% [EOF] ChibiOS_pwm.tlc





