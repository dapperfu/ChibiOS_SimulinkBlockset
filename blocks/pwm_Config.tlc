%% File : level2.tlc
%% Created: Fri Nov 22 09:54:51 2013
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "chibiOS_pwm.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  pwm_Config "C"

%% Function: BlockInstanceSetup (%<Name>)===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockInstanceSetup(block, system) Output
    %assign modelH      = LibGetModelDotHFile()
    %assign modelC      = LibGetModelDotCFile()
    %openfile buffer
        /* LibCacheDefine - BlockInstanceSetup (%<Name>)*/
    %closefile buffer
    %<LibCacheDefine(buffer)>

    %openfile buffer2
        /* LibCacheIncludes - BlockInstanceSetup (%<Name>)*/
    %closefile buffer2
    %<LibCacheIncludes(buffer2)>

    %openfile buffer3
        /* LibCacheExtern - BlockInstanceSetup (%<Name>)*/
    %closefile buffer3
    %<LibCacheExtern(buffer3)>

    %openfile buffer4
        /* LibCacheFunctionPrototype - BlockInstanceSetup (%<Name>)*/
    %closefile buffer4
    %<LibCacheFunctionPrototype(buffer)>

   %% Code Sections Emitted by CFP Templates
    %openfile buffer
        /* Banner - BlockInstanceSetup (%<Name>)*/
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Banner",buffer)>

    %openfile buffer
        /* Includes - BlockInstanceSetup (%<Name>)*/
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Includes",buffer)>

    %openfile buffer
        /* Defines - BlockInstanceSetup (%<Name>)*/
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Defines",buffer)>

    %openfile buffer
        /* IntrinsicTypes - BlockInstanceSetup (%<Name>)*/
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"IntrinsicTypes",buffer)>

    %openfile buffer
        /* PrimitiveTypedefs - BlockInstanceSetup (%<Name>)*/
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"PrimitiveTypedefs",buffer)>

    %openfile buffer
        /* UserTop - BlockInstanceSetup (%<Name>)*/
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"UserTop",buffer)>

    %openfile buffer
        /* Typedefs - BlockInstanceSetup (%<Name>)*/
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Typedefs",buffer)>

    %openfile buffer
        /* Enums - BlockInstanceSetup (%<Name>)*/
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Enums",buffer)>

    %openfile buffer
        /* Declarations - BlockInstanceSetup (%<Name>)*/
static PWMConfig pwmcfg%<block.ParamSettings.pwmDriver> = {
	%<block.ParamSettings.pwmClockFreq>,
	%<block.ParamSettings.pwmPeriod>,
	NULL,
	{
		{%<block.ParamSettings.pwmChan1>, NULL},
		{%<block.ParamSettings.pwmChan2>, NULL},
		{%<block.ParamSettings.pwmChan3>, NULL},
		{%<block.ParamSettings.pwmChan4>, NULL}
	},
	/* HW dependent part.*/
	0,
	0
};
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Declarations",buffer)>

    %openfile buffer
        /* Functions - BlockInstanceSetup (%<Name>)*/
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Functions",buffer)>

    %openfile buffer
        /* CompilerErrors - BlockInstanceSetup (%<Name>)*/
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"CompilerErrors",buffer)>

    %openfile buffer
        /* CompilerWarnings - BlockInstanceSetup (%<Name>)*/
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"CompilerWarnings",buffer)>

    %openfile buffer
        /* Documentation - BlockInstanceSetup (%<Name>)*/
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"Documentation",buffer)>

    %openfile buffer
        /* UserBottom - BlockInstanceSetup (%<Name>).c */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"UserBottom",buffer)>

    %openfile buffer
        /* UserBottom - BlockInstanceSetup (%<Name>).h */
    %closefile buffer
    %<LibSetSourceFileSection(modelH,"UserBottom",buffer)>
%endfunction

%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
    %assign modelH      = LibGetModelDotHFile()
    %assign modelC      = LibGetModelDotCFile()
    %<LibAddToCommonIncludes("hal.h")>
    %<LibAddToCommonIncludes("ch.h")>

    %openfile buffer
        /* LibCacheDefine - BlockTypeSetup */
        LibCacheDefine_BlockTypeSetup();
    %closefile buffer
    %<LibCacheDefine(buffer)>

    %openfile buffer2
        /* LibCacheIncludes - BlockTypeSetup */
        LibCacheIncludes_BlockTypeSetup();
    %closefile buffer2
    %<LibCacheIncludes(buffer2)>

    %openfile buffer3
        /* LibCacheExtern - BlockTypeSetup */
        LibCacheExtern_BlockTypeSetup();
    %closefile buffer3
    %<LibCacheExtern(buffer3)>

    %openfile buffer4
        /* LibCacheFunctionPrototype - BlockTypeSetup */
        LibCacheFunctionPrototype_BlockTypeSetup();
    %closefile buffer4
    %<LibCacheFunctionPrototype(buffer)>

    %openfile buffer
        /* UserBottom - BlockTypeSetup .c */
    %closefile buffer
    %<LibSetSourceFileSection(modelC,"UserBottom",buffer)>

    %openfile buffer
        /* UserBottom - BlockTypeSetup .h */
    %closefile buffer
    %<LibSetSourceFileSection(modelH,"UserBottom",buffer)>
%endfunction

%% Function: Enable =============================================================
%%
%function Enable(block, system) Output
    /* Enable Block: %<Name> */
	pwmStart(&PWMD%<block.ParamSettings.pwmDriver>, &pwmcfg%<block.ParamSettings.pwmDriver>);
%endfunction

%% Function: Disable =============================================================
%%
%function Disable(block, system) Output
    /* Disable Block: %<Name> */
    pwmStop(&PWMD%<block.ParamSettings.pwmDriver>);
%endfunction

%% InitializeConditions: Start =============================================================
%%
%function InitializeConditions(block, system) Output
    /* InitializeConditions Block: %<Name> */
	pwmStart(&PWMD%<block.ParamSettings.pwmDriver>, &pwmcfg%<block.ParamSettings.pwmDriver>);
    %<block.ParamSettings.palSetPadMode1>
    %<block.ParamSettings.palSetPadMode2>
    %<block.ParamSettings.palSetPadMode3>
    %<block.ParamSettings.palSetPadMode4>
%endfunction

%% Function: Start =============================================================
%%
%function Start(block, system) Output
    /* Start Block: %<Name> */
%endfunction

%% Function: Outputs ==========================================================
%%
%function Outputs(block, system) Output
    /* Output Block: %<Name> */
%endfunction

%% Function: Update =============================================================
%%
%function Update(block, system) Output
    /* Update Block: %<Name> */
    %assign PWM1=LibBlockInputSignal(0, "", "", 0)
    %assign PWM2=LibBlockInputSignal(1, "", "", 0)
    %assign PWM3=LibBlockInputSignal(2, "", "", 0)
    %assign PWM4=LibBlockInputSignal(3, "", "", 0)
    pwmEnableChannel(&PWMD%<block.ParamSettings.pwmDriver>, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD%<block.ParamSettings.pwmDriver>, %<PWM1>));
    pwmEnableChannel(&PWMD%<block.ParamSettings.pwmDriver>, 1, PWM_PERCENTAGE_TO_WIDTH(&PWMD%<block.ParamSettings.pwmDriver>, %<PWM2>));
    pwmEnableChannel(&PWMD%<block.ParamSettings.pwmDriver>, 2, PWM_PERCENTAGE_TO_WIDTH(&PWMD%<block.ParamSettings.pwmDriver>, %<PWM3>));
    pwmEnableChannel(&PWMD%<block.ParamSettings.pwmDriver>, 3, PWM_PERCENTAGE_TO_WIDTH(&PWMD%<block.ParamSettings.pwmDriver>, %<PWM4>));
%endfunction


%% Function: Terminate =============================================================
%%
%function Derivatives(block, system) Output
    /* Derivative Block: %<Name> */
%endfunction

%% Function: Terminate =============================================================
%%
%function Terminate(block, system) Output
    /* Terminate Block: %<Name> */
%endfunction

%% [EOF] level2.tlc





