# 
# File    : ChibiOS.tmf
#
# $ ChibiOS.tmf 2013-11-02 freyjed $
#
#
# Abstract:
#       Real-Time Workshop template makefile for building a 
#       stand-alone embedded real-time version of Simulink model using
#       generated C code and IAR (EWARM) Compiler for ARM

#------------------------- Path Information -------------------------------

# Project and application specific tools and directories:
#Target is STM32F4xx ARM M4_Core based 
TARGET      = STM32F4XX

#Use mex extention to know if 32 or 64bit installed
MEXEXT = |>MEXEXT<|

#TARGET_PATH is PATH of ChibiOS distrib repository. 
#All path are based on it.
TARGET_PATH = "|>TARGET_INST_PATH<|"

#Path for PIL sources, includes, STM32 and CMSIS libraries
SRC         = $(TARGET_PATH)\src
CMSISINC    = $(TARGET_PATH)\lib\CMSIS\Device\ST\STM32F4xx\Include
CMSISDSPINC = $(TARGET_PATH)\lib\CMSIS\Include
LIBINC      = $(TARGET_PATH)\lib\$(TARGET)_StdPeriph_Driver\inc
LIBSRC      = $(TARGET_PATH)\lib\$(TARGET)_StdPeriph_Driver\src
PATHSETUP   = $(TARGET_PATH)\lib\CMSIS\Device\ST\STM32F4xx\Source\Templates
PIL_RTIO	= $(TARGET_PATH)\pil\stm32F4xxSerialRtiostream
CMSISDSPSRC = $(TARGET_PATH)\lib\CMSIS\DSP_Lib\Source\BasicMathFunctions
CMSISDSPSRC1 = $(TARGET_PATH)\lib\CMSIS\DSP_Lib\Source\CommonTables
CMSISDSPSRC2 = $(TARGET_PATH)\lib\CMSIS\DSP_Lib\Source\ControllerFunctions
CMSISDSPSRC3 = $(TARGET_PATH)\lib\CMSIS\DSP_Lib\Source\FastMathFunctions
CMSISDSPSRC4 = $(TARGET_PATH)\lib\CMSIS\DSP_Lib\Source\FilteringFunctions
CMSISDSPSRC5 = $(TARGET_PATH)\lib\CMSIS\DSP_Lib\Source\MatrixFunctions
CMSISDSPSRC6 = $(TARGET_PATH)\lib\CMSIS\DSP_Lib\Source\StatisticsFunctions
CMSISDSPSRC7 = $(TARGET_PATH)\lib\CMSIS\DSP_Lib\Source\SupportFunctions
CMSISDSPSRC8 = $(TARGET_PATH)\lib\CMSIS\DSP_Lib\Source\TransformFunctions


#------------------------ Macros read by make_rtw ------------------------------
#
# The following macros are read by the Real-Time Workshop build procedure:
#
#  MAKECMD         - This is the command used to invoke the make utility
#  HOST            - What platform this template makefile is targeted for
#                    (i.e. PC or UNIX)
#  BUILD           - Invoke make from the Real-Time Workshop build procedure
#                    (yes/no)?
#  SYS_TARGET_FILE - Name of system target file.


MAKECMD         = "%MATLAB%\bin\%MATLAB_WIN_VER%\gmake"

SHELL           = cmd
HOST            = PC
BUILD           = yes
SYS_TARGET_FILE = ChibiOS.tlc
MAKEFILE_FILESEP = /

#source file extension
SRC_FILE_EXT = .c
#object file extension
OBJ_EXT = .o
#File extention is .out for IAR exec file
PROGRAM_FILE_EXT = .out
#File extension is .lib for library file
BINARY_FILE_EXT = .lib
#File extension is .s for IAR assembler file (startup)
ASM_FILE_EXT = .s
#---------------------- Tokens expanded by make_rtw ----------------------------
#
# The following tokens, when wrapped with "|>" and "<|" are expanded by the
# Real-Time Workshop build procedure.
#
#  TOOL_CHAIN          - Name of toolchain used. Can be IAR or ATOLLIC.
#  BOOT_MODE           - From FLASH or boot from RAM (Usually FLASH)
#  COMPILER_TOOL_CHAIN - Toolchain used (IAR, ATOLLIC) from system target file
#  MODEL_NAME          - Name of the Simulink block diagram
#  MODEL_MODULES       - Any additional generated source modules
#  MAKEFILE_NAME       - Name of makefile created from template makefile <model>.mk
#  MATLAB_ROOT         - Path to were MATLAB is installed.
#  MATLAB_BIN          - Path to MATLAB executable.
#  S_FUNCTIONS         - List of additional S-function modules.
#  S_FUNCTIONS_LIB     - List of S-functions libraries to link. 
#  NUMST               - Number of sample times
#  NCSTATES            - Number of continuous states
#  BUILDARGS           - Options passed in at the command line.
#  MULTITASKING        - yes (1) or no (0): Is solver mode multitasking
#  INTEGER_CODE        - yes (1) or no (0): Is generated code purely integer
#  MAT_FILE            - yes (1) or no (0): Should mat file logging be done,
#                        if 0, the generated code runs indefinitely
#  EXT_MODE            - yes (1) or no (0): Build for external mode
#  TMW_EXTMODE_TESTING - yes (1) or no (0): Build ext_test.c for external mode
#                        testing.
#  EXTMODE_TRANSPORT   - Index of transport mechanism (e.g. tcpip, serial) for extmode
#  EXTMODE_STATIC      - yes (1) or no (0): Use static instead of dynamic mem alloc.
#  EXTMODE_STATIC_SIZE - Size of static memory allocation buffer.
#  MULTI_INSTANCE_CODE - Is the generated code multi instantiable (1/0)?
#  PORTABLE_WORDSIZES  - Is this build intented for SIL simulation with portable word sizes (1/0)?
#  SHRLIBTARGET        - Is this build intended for generation of a shared library instead 
#                        of executable (1/0)?
TOOL_CHAIN           = |>TOOLCHAIN<|
BOOT_MODE            = |>FLASH_RAM<|
COMPILER_TOOL_CHAIN  = |>TOOLCHAIN<|
MODEL                = |>MODEL_NAME<|
MODULES              = |>MODEL_MODULES<|
MODULES_OBJ          = |>MODEL_MODULES_OBJ<|
MAKEFILE             = |>MAKEFILE_NAME<|
TOOLPATH             = "|>COMPILERPATH<|"
MATLAB_ROOT          = "|>MATLAB_ROOT<|"
ALT_MATLAB_ROOT      = "|>ALT_MATLAB_ROOT<|"
MATLAB_BIN           = "|>MATLAB_BIN<|"
ALT_MATLAB_BIN       = "|>ALT_MATLAB_BIN<|"
S_FUNCTIONS          = |>S_FUNCTIONS<|
S_FUNCTIONS_LIB      = |>S_FUNCTIONS_LIB<|
NUMST                = |>NUMST<|
NCSTATES             = |>NCSTATES<|
BUILDARGS            = |>BUILDARGS<|
MULTITASKING         = |>MULTITASKING<|
INTEGER_CODE         = |>INTEGER_CODE<|
MAT_FILE             = |>MAT_FILE<|
ONESTEPFCN           = |>COMBINE_OUTPUT_UPDATE_FCNS<|
TERMFCN              = |>INCLUDE_MDL_TERMINATE_FCN<|
B_ERTSFCN            = |>GENERATE_ERT_S_FUNCTION<|
#MEXEXT               = |>MEXEXT<|
EXT_MODE             = |>EXT_MODE<|
TMW_EXTMODE_TESTING  = |>TMW_EXTMODE_TESTING<|
EXTMODE_TRANSPORT    = |>EXTMODE_TRANSPORT<|
EXTMODE_STATIC       = |>EXTMODE_STATIC_ALLOC<|
EXTMODE_STATIC_SIZE  = |>EXTMODE_STATIC_ALLOC_SIZE<|
MULTI_INSTANCE_CODE  = |>MULTI_INSTANCE_CODE<|
MODELREFS            = |>MODELREFS<|
TARGET_LANG_EXT      = |>TARGET_LANG_EXT<|
SHARED_SRC           = |>SHARED_SRC<|
SHARED_SRC_DIR       = |>SHARED_SRC_DIR<|
SHARED_BIN_DIR       = |>SHARED_BIN_DIR<|
SHARED_LIB           = |>SHARED_LIB<|
MEX_OPT_FILE         = |>MEX_OPT_FILE<|
PORTABLE_WORDSIZES   = |>PORTABLE_WORDSIZES<|
SHRLIBTARGET         = |>SHRLIBTARGET<|
OPTIMIZATION_FLAGS   = |>OPTIMIZATION_FLAGS<|
ADDITIONAL_LDFLAGS   = |>ADDITIONAL_LDFLAGS<|
MAKEFILEBUILDER_TGT  = |>MAKEFILEBUILDER_TGT<|
STANDALONE_SUPPRESS_EXE = |>STANDALONE_SUPPRESS_EXE<|

#--------------------------- Model and reference models -----------------------
MODELLIB             = |>MODELLIB<|
MODELREF_LINK_LIBS   = |>MODELREF_LINK_LIBS<|
MODELREF_LINK_RSPFILE     = |>MODELREF_LINK_RSPFILE_NAME<|
MODELREF_INC_PATH         = |>START_MDLREFINC_EXPAND_INCLUDES<| -I |>MODELREF_INC_PATH<| |>END_MDLREFINC_EXPAND_INCLUDES<| 
RELATIVE_PATH_TO_ANCHOR   = |>RELATIVE_PATH_TO_ANCHOR<|
MODELREF_TARGET_TYPE      = |>MODELREF_TARGET_TYPE<|

#Matlab Path checking
ifneq ($(MATLAB_ROOT),$(ALT_MATLAB_ROOT))
MATLAB_ROOT = $(ALT_MATLAB_ROOT)
endif
MATLAB_ROOT := $(subst \,/,$(MATLAB_ROOT))
MATLAB_ROOT := $(subst Program Files,Program\ Files,$(MATLAB_ROOT))
ifneq ($(MATLAB_BIN),$(ALT_MATLAB_BIN))
MATLAB_BIN = $(ALT_MATLAB_BIN)
endif
MATLAB_BIN := $(subst Program Files,Program\ Files,$(MATLAB_BIN))
MATLAB_BIN := $(subst ~,\~,$(MATLAB_BIN))

##############################################################################
# Build global options
# NOTE: Can be overridden externally.
#

# Compiler options here.
ifeq ($(USE_OPT),)
  USE_OPT = -O2 -ggdb -fomit-frame-pointer -falign-functions=16
endif

# C specific options here (added to USE_OPT).
ifeq ($(USE_COPT),)
  USE_COPT = 
endif

# C++ specific options here (added to USE_OPT).
ifeq ($(USE_CPPOPT),)
  USE_CPPOPT = -fno-rtti
endif

# Enable this if you want the linker to remove unused code and data
ifeq ($(USE_LINK_GC),)
  USE_LINK_GC = yes
endif

# If enabled, this option allows to compile the application in THUMB mode.
ifeq ($(USE_THUMB),)
  USE_THUMB = yes
endif

# Enable this if you want to see the full log while compiling.
ifeq ($(USE_VERBOSE_COMPILE),)
  USE_VERBOSE_COMPILE = no
endif

#
# Build global options
##############################################################################

##############################################################################
# Architecture or project specific options
#

# Enables the use of FPU on Cortex-M4.
# Enable this if you really want to use the STM FWLib.
ifeq ($(USE_FPU),)
  USE_FPU = no
endif

# Enable this if you really want to use the STM FWLib.
ifeq ($(USE_FWLIB),)
  USE_FWLIB = no
endif

#
# Architecture or project specific options
##############################################################################

##############################################################################
# Project, sources and paths
#

# Define project name here
PROJECT = ch

# Imported source files and paths
CHIBIOS      = "|>ALT_CHIBIOS_ROOT<|"
BOARD        = "|>CHIBIOS_BOARD<|"
PLATFORM     = "|>CHIBIOS_PLATFORM<|"
COMPILER     = "|>CHIBIOS_COMPILER<|"
COMPILER_ROOT= "|>ALT_CHIBIOS_COMPILERROOT<|"
INSTRUCTION  = "|>CHIBIOS_INSTRUCTIONSET<|"
CHIP         = "|>CHIBIOS_CHIP<|"

include $(CHIBIOS)/boards/$(BOARD)/board.mk
include $(CHIBIOS)/os/hal/platforms/$(PLATFORM)/platform.mk
include $(CHIBIOS)/os/hal/hal.mk
include $(CHIBIOS)/os/ports/$(COMPILER)/$(INSTRUCTION)/$(CHIP)/port.mk
include $(CHIBIOS)/os/kernel/kernel.mk
include $(CHIBIOS)/test/test.mk

# Define linker script file here
LDSCRIPT= $(PORTLD)/STM32F407xG.ld

# C sources that can be compiled in ARM or THUMB mode depending on the global
# setting.
CSRC = $(PORTSRC) \
       $(KERNSRC) \
       $(TESTSRC) \
       $(HALSRC) \
       $(PLATFORMSRC) \
       $(BOARDSRC) \
       $(CHIBIOS)/os/various/devices_lib/accel/lis302dl.c \
       $(CHIBIOS)/os/various/chprintf.c \
       main.c

# C++ sources that can be compiled in ARM or THUMB mode depending on the global
# setting.
CPPSRC =

# C sources to be compiled in ARM mode regardless of the global setting.
# NOTE: Mixing ARM and THUMB mode enables the -mthumb-interwork compiler
#       option that results in lower performance and larger code size.
ACSRC =

# C++ sources to be compiled in ARM mode regardless of the global setting.
# NOTE: Mixing ARM and THUMB mode enables the -mthumb-interwork compiler
#       option that results in lower performance and larger code size.
ACPPSRC =

# C sources to be compiled in THUMB mode regardless of the global setting.
# NOTE: Mixing ARM and THUMB mode enables the -mthumb-interwork compiler
#       option that results in lower performance and larger code size.
TCSRC =

# C sources to be compiled in THUMB mode regardless of the global setting.
# NOTE: Mixing ARM and THUMB mode enables the -mthumb-interwork compiler
#       option that results in lower performance and larger code size.
TCPPSRC =

# List ASM source files here
ASMSRC = $(PORTASM)

INCDIR = $(PORTINC) $(KERNINC) $(TESTINC) \
         $(HALINC) $(PLATFORMINC) $(BOARDINC) \
         $(CHIBIOS)/os/various/devices_lib/accel \
         $(CHIBIOS)/os/various

#
# Project, sources and paths
##############################################################################

##############################################################################
# Compiler settings
#

MCU  = cortex-m4

#TRGT = arm-elf-
TRGT = $(ALT_COMPILER_ROOT)/arm-none-eabi-
CC   = $(TRGT)gcc
CPPC = $(TRGT)g++
# Enable loading with g++ only if you need C++ runtime support.
# NOTE: You can use C++ even without C++ support if you are careful. C++
#       runtime support makes code size explode.
LD   = $(TRGT)gcc
#LD   = $(TRGT)g++
CP   = $(TRGT)objcopy
AS   = $(TRGT)gcc -x assembler-with-cpp
OD   = $(TRGT)objdump
HEX  = $(CP) -O ihex
BIN  = $(CP) -O binary

# ARM-specific options here
AOPT =

# THUMB-specific options here
TOPT = -mthumb -DTHUMB

# Define C warning options here
CWARN = -Wall -Wextra -Wstrict-prototypes

# Define C++ warning options here
CPPWARN = -Wall -Wextra

#
# Compiler settings
##############################################################################

##############################################################################
# Start of default section
#

# List all default C defines here, like -D_DEBUG=1
DDEFS =

# List all default ASM defines here, like -D_DEBUG=1
DADEFS =

# List all default directories to look for include files here
DINCDIR =

# List the default directory to look for the libraries here
DLIBDIR =

# List all default libraries here
DLIBS =

#
# End of default section
##############################################################################

##############################################################################
# Start of user section
#

# List all user C define here, like -D_DEBUG=1
UDEFS =

# Define ASM defines here
UADEFS =

# List all user directories here
UINCDIR =

# List the user directory to look for the libraries here
ULIBDIR =

# List all user libraries here
ULIBS =

#
# End of user defines
##############################################################################

ifeq ($(USE_FPU),yes)
  USE_OPT += -mfloat-abi=softfp -mfpu=fpv4-sp-d16 -fsingle-precision-constant
  DDEFS += -DCORTEX_USE_FPU=TRUE
else
  DDEFS += -DCORTEX_USE_FPU=FALSE
endif

ifeq ($(USE_FWLIB),yes)
  include $(CHIBIOS)/ext/stm32lib/stm32lib.mk
  CSRC += $(STM32SRC)
  INCDIR += $(STM32INC)
  USE_OPT += -DUSE_STDPERIPH_DRIVER
endif

include $(CHIBIOS)/os/ports/$(COMPILER)/$(INSTRUCTION)/rules.mk