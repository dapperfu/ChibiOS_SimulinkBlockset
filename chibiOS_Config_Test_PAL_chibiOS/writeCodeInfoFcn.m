% Autogenerated file: Sat May 27 00:44:59 2017
function writeCodeInfoFcn


% Load a ComponentInterface object from IR
codeIRInfoStruct = load('C:\Projects\ChibiOS_SimulinkBlockset\chibiOS_Config_Test_PAL_chibiOS\tlc\codeIRInfo.mat');
codeInfo = codeIRInfoStruct.codeInfo;




skippedParameters = [];
                
% Built-In Type: 0
Type_0_R0_V0 = numerictype('double');
  Type_0_R0_V0.Name = 'double';
  Type_0_R0_V0.Identifier = 'real_T';
  Type_0_R0_V0.ReadOnly   = 0;
  Type_0_R0_V0.Volatile   = 0;
    
  % Matrix Type
  Type_19_R0_V0 = embedded.matrixtype;
  Type_19_R0_V0.BaseType   = Type_0_R0_V0;
    Type_19_R0_V0.Dimensions = [1, 1];
    
  tmpParams = [];
if ~isempty(tmpParams)
codeInfo.Parameters = [codeInfo.Parameters; tmpParams];
end

    tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = [];
tmpActualReturn = [];
  

  Initialize_Prototype = RTW.CImplementation;
  Initialize_Prototype.Arguments  = tmpArgs;
  Initialize_Prototype.Return     = tmpRet;
    Initialize_Prototype.HeaderFile = ['chibiOS_Config_Test_PAL', '.h'];
  Initialize_Prototype.SourceFile = ['chibiOS_Config_Test_PAL', '.c'];

  Initialize_Interface = RTW.FunctionInterface;
  Initialize_Interface.Prototype    = Initialize_Prototype;
  Initialize_Interface.ActualArgs   = tmpActualArgs;
  Initialize_Interface.ActualReturn = tmpActualReturn;

      Initialize_Prototype.Name = 'chibiOS_Config_Test_PAL_initialize';
  time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
      Initialize_Interface.Timing = time_constant;
      codeInfo.InitializeFunctions =  [codeInfo.InitializeFunctions; Initialize_Interface'];

            tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = [];
tmpActualReturn = [];

% Unsized integer type    
Type_int_R0_V0 = numerictype(1, 32, 0);
    Type_int_R0_V0.Identifier = 'int_T';
    Type_int_R0_V0.Name       = 'int';
    Type_int_R0_V0.ReadOnly   = 0;
    Type_int_R0_V0.Volatile   = 0;
    
  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
        TIDArg = RTW.Argument;
        TIDArg.Type = Type_int_R0_V0;
        TIDArg.Name = 'tid';
    
% Literal: Lit_0
Lit_0 = RTW.Literal(Type_int_R0_V0, 0);
    
    
% Data Interface: Const_TID0
Const_TID0 = RTW.DataInterface('', 'TID0', Lit_0, []);
    
                
tmpArgs = [tmpArgs; TIDArg];
tmpActualArgs = [tmpActualArgs; Const_TID0];
  

  OutputUpdate0_Prototype = RTW.CImplementation;
  OutputUpdate0_Prototype.Arguments  = tmpArgs;
  OutputUpdate0_Prototype.Return     = tmpRet;
    OutputUpdate0_Prototype.HeaderFile = ['chibiOS_Config_Test_PAL', '.h'];
  OutputUpdate0_Prototype.SourceFile = ['chibiOS_Config_Test_PAL', '.c'];

  OutputUpdate0_Interface = RTW.FunctionInterface;
  OutputUpdate0_Interface.Prototype    = OutputUpdate0_Prototype;
  OutputUpdate0_Interface.ActualArgs   = tmpActualArgs;
  OutputUpdate0_Interface.ActualReturn = tmpActualReturn;

      OutputUpdate0_Prototype.Name = 'chibiOS_Config_Test_PAL_step';
  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
      OutputUpdate0_Interface.Timing = time_0;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions; OutputUpdate0_Interface'];

            tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = [];
tmpActualReturn = [];
  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
        TIDArg = RTW.Argument;
        TIDArg.Type = Type_int_R0_V0;
        TIDArg.Name = 'tid';
    
% Literal: Lit_1
Lit_1 = RTW.Literal(Type_int_R0_V0, 1);
    
    
% Data Interface: Const_TID1
Const_TID1 = RTW.DataInterface('', 'TID1', Lit_1, []);
    
                
tmpArgs = [tmpArgs; TIDArg];
tmpActualArgs = [tmpActualArgs; Const_TID1];
  

  OutputUpdate1_Prototype = RTW.CImplementation;
  OutputUpdate1_Prototype.Arguments  = tmpArgs;
  OutputUpdate1_Prototype.Return     = tmpRet;
    OutputUpdate1_Prototype.HeaderFile = ['chibiOS_Config_Test_PAL', '.h'];
  OutputUpdate1_Prototype.SourceFile = ['chibiOS_Config_Test_PAL', '.c'];

  OutputUpdate1_Interface = RTW.FunctionInterface;
  OutputUpdate1_Interface.Prototype    = OutputUpdate1_Prototype;
  OutputUpdate1_Interface.ActualArgs   = tmpActualArgs;
  OutputUpdate1_Interface.ActualReturn = tmpActualReturn;

      OutputUpdate1_Prototype.Name = 'chibiOS_Config_Test_PAL_step';
  time_1 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 1));
      OutputUpdate1_Interface.Timing = time_1;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions; OutputUpdate1_Interface'];

            tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = [];
tmpActualReturn = [];
  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
        TIDArg = RTW.Argument;
        TIDArg.Type = Type_int_R0_V0;
        TIDArg.Name = 'tid';
    
% Literal: Lit_2
Lit_2 = RTW.Literal(Type_int_R0_V0, 2);
    
    
% Data Interface: Const_TID2
Const_TID2 = RTW.DataInterface('', 'TID2', Lit_2, []);
    
                
tmpArgs = [tmpArgs; TIDArg];
tmpActualArgs = [tmpActualArgs; Const_TID2];
  

  OutputUpdate2_Prototype = RTW.CImplementation;
  OutputUpdate2_Prototype.Arguments  = tmpArgs;
  OutputUpdate2_Prototype.Return     = tmpRet;
    OutputUpdate2_Prototype.HeaderFile = ['chibiOS_Config_Test_PAL', '.h'];
  OutputUpdate2_Prototype.SourceFile = ['chibiOS_Config_Test_PAL', '.c'];

  OutputUpdate2_Interface = RTW.FunctionInterface;
  OutputUpdate2_Interface.Prototype    = OutputUpdate2_Prototype;
  OutputUpdate2_Interface.ActualArgs   = tmpActualArgs;
  OutputUpdate2_Interface.ActualReturn = tmpActualReturn;

      OutputUpdate2_Prototype.Name = 'chibiOS_Config_Test_PAL_step';
  time_2 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 2));
      OutputUpdate2_Interface.Timing = time_2;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions; OutputUpdate2_Interface'];

            tmpArgs         = [];
tmpActualArgs   = [];
tmpRet          = [];
tmpActualReturn = [];
  time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
        TIDArg = RTW.Argument;
        TIDArg.Type = Type_int_R0_V0;
        TIDArg.Name = 'tid';
    
% Literal: Lit_3
Lit_3 = RTW.Literal(Type_int_R0_V0, 3);
    
    
% Data Interface: Const_TID3
Const_TID3 = RTW.DataInterface('', 'TID3', Lit_3, []);
    
                
tmpArgs = [tmpArgs; TIDArg];
tmpActualArgs = [tmpActualArgs; Const_TID3];
  

  OutputUpdate3_Prototype = RTW.CImplementation;
  OutputUpdate3_Prototype.Arguments  = tmpArgs;
  OutputUpdate3_Prototype.Return     = tmpRet;
    OutputUpdate3_Prototype.HeaderFile = ['chibiOS_Config_Test_PAL', '.h'];
  OutputUpdate3_Prototype.SourceFile = ['chibiOS_Config_Test_PAL', '.c'];

  OutputUpdate3_Interface = RTW.FunctionInterface;
  OutputUpdate3_Interface.Prototype    = OutputUpdate3_Prototype;
  OutputUpdate3_Interface.ActualArgs   = tmpActualArgs;
  OutputUpdate3_Interface.ActualReturn = tmpActualReturn;

      OutputUpdate3_Prototype.Name = 'chibiOS_Config_Test_PAL_step';
  time_3 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 3));
      OutputUpdate3_Interface.Timing = time_3;
      codeInfo.OutputFunctions =  [codeInfo.OutputFunctions; OutputUpdate3_Interface'];


  


if ~isempty(skippedParameters)
codeInfo.Parameters(skippedParameters) = [];
end


% Handling Right-Click Builds
ss = rtwprivate('getSourceSubsystemHandle',codeInfo.GraphicalPath);
% Check if Rt-Click build, then re-map SIDs
if ~isempty(ss) && rtwprivate('rtwattic','hasSIDMap')
   codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo);
end

  lookupTableArray = [];         
  if exist('expInports', 'var')
    save codeInfo.mat codeInfo expInports lookupTableArray;
  else
    save codeInfo.mat codeInfo lookupTableArray;
  end
returnVal = 1;

% End Function: writeCodeInfoFcn

function idx = getIndexFromTimingInternalId(internalIdVec, internalId)
 idx = find(internalIdVec == internalId);
 if (isempty(idx) || (length(idx) > 1))
    ciMsg = 'Time object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getIndexFromTimingInternalId

function checkDataGraphicalNames(ciName, rtwName)
  if (strcmp(ciName, rtwName) ~= 1)
    ciMsg = ['Name mismatch: ', ciName, ' and ', rtwName]; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: checkDataGraphicalNames

function iData = getInternalDataByName(iDataVec, iDataName)
 iData = find(iDataVec, 'GraphicalName', iDataName);
 if (isempty(iData) || (length(iData) > 1))
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByName

function iData = getInternalDataByVariableName(iDataVec, iDataVariableName)
 iData = [];
 for idxData = 1:numel(iDataVec)
    if strcmp(iDataVariableName, iDataVec(idxData).Implementation.VariableName)
       iData = iDataVec(idxData);
       break
    end
 end
 if isempty(iData)
    ciMsg = 'Internal Data object cannot be empty'; 
    ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
    throw(ciExc);
  end
% End Function: getInternalDataByVariableName

function codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo)
    
% Extract Subsystem Build Map from AtticData
    Subsystem_Build_Mapping = rtwprivate('rtwattic','getSIDMap');

% Parameters
    for i = 1:length(codeInfo.Parameters)
        sid = codeInfo.Parameters(i).SID;        

        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Parameters(i).SID = sid;        
    end
    
% Data Stores
     for i = 1:length(codeInfo.DataStores)
         sid = codeInfo.DataStores(i).SID;         

         sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
         codeInfo.DataStores(i).SID = sid;
     end
    
% Inports
    for i = 1:length(codeInfo.Inports)
        sid = codeInfo.Inports(i).SID;
        
        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Inports(i).SID = sid;
    end
    
% Outports
    for i = 1:length(codeInfo.Outports)
        sid = codeInfo.Outports(i).SID;
 
        sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
        codeInfo.Outports(i).SID = sid;
    end    
   
