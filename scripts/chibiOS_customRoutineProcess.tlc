%%
%% CUSTOM_ROUTINE_PROCESS generates required files beyond the 
%% default RTW generated files.
%%
%% $ custom_routine_process.tlc 2009-05-14 dlange $
%% Main creation example :
%% Create MAIN (harness) for singlerate PIL system:
%selectfile NULL_FILE
%%Create sysTick_handler for Real Time appli. 
%<LibSetCodeTemplateComplianceLevel(1)>

%assign CodeFormat = "Embedded-C"

%warning Create real-time application main.c
%assign modelName = LibGetModelName()
%assign SrcBaseName = LibGetMdlSrcBaseName()
%assign cFile = LibCreateSourceFile("Source", "Custom", "main")
%assign NbOfTasks = LibGetNumSyncPeriodicTasks()
%assign FixedStep = FEVAL("getFixedStep","%<modelName>")
%if (ISEQUAL("%<FixedStep>", "auto"))
%assign FixedStep = 0.001
%endif
%%	%assign NbOfTasks = LibGetNumTasks()

%% Add corresponding System-Includes to the Includes-Section:
%openfile main_Buf
#include "ch.h"
#include "hal.h"
%closefile main_Buf
%<LibSetSourceFileSection(cFile, "Includes", main_Buf)>
%% Create calling syntax for the model initialization and step routine:
%openfile main_Buf
VirtualTimer vt;

/* Step the model for base rate */
void baseRateClock(void *p) {
     /* Restarts the timer.*/
     chSysLockFromIsr();
     chVTSetI(&vt, S2ST(%<FixedStep>), baseRateClock, p);
     chSysUnlockFromIsr();
     %<LibGetMdlSrcBaseName()>_step();
}

int main (void) {
    /* ChibiOS Init */
    halInit();
    chSysInit();

    /* Periodic Function Initi */
    chSysLock();
    /* Starts the timer.*/
    chVTSetI(&vt, S2ST(%<FixedStep>), baseRateClock, NULL);
    chSysUnlock();
    /* Infinite loop */
    while(1) {
        /* Add code here */
    }
}        
%closefile main_Buf 
%<LibSetSourceFileSection(cFile, "Functions", main_Buf)>
%% EOF: chibiOS_customRoutineProcess.tlc